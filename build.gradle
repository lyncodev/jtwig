buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:0.6"
    }
}

import java.text.SimpleDateFormat

def globalVersion = new Version(currentVersion)

allprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'idea'
    apply plugin: 'com.jfrog.bintray'

    group = 'org.jtwig'
    version = globalVersion
    status = version.status

    ext.publish = true
    bintray {
        user = bintray_user
        key = bintray_key
        publish = project.publish
        configurations = ['published']
        pkg {
            repo = 'maven'
            userOrg = 'jtwig'
            name = 'jtwig'
            desc = 'Jtwig : Modern Template Engine for Java'
            websiteUrl = 'http://www.jtwig.org'
            issueTrackerUrl = 'https://github.com/jtwig/jtwig/issues'
            vcsUrl = 'https://github.com/jtwig/jtwig.git'
            licenses = ['Apache-2.0']
            labels = ['java', 'templates', 'jtwig']
            attributes= ['plat': ['linux', 'osx', 'win']]
            publicDownloadNumbers = true
            version {
                name = globalVersion //Optional logical version name
                desc = 'Jtwig : Modern Template Engine for Java'
                vcsTag = globalVersion
            }
        }
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: 'maven'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        mavenCentral()
    }

    configurations {
        published
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}


configurations {
    published
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

class Version {
    String originalVersion
    String thisVersion
    String status

    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'snapshot'

            def initialVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length())
            thisVersion = initialVersion + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }
    String toString() {
        thisVersion
    }

}
